service: appsync-crud-sls-backend
frameworkVersion: "2"

plugins:
  # Using appsync plugin to build Graphql api easily.
  - serverless-appsync-plugin
  # Using esbuild plugin to compile and bundle the typescript lambdas.
  - serverless-esbuild
  # Using iam-roles-per-function plugin so that each lambda has it's own role (principle of least privilege)
  # limiting blast radius if the lambda is compromised.
  - serverless-iam-roles-per-function
  # Using export-env plugin to which exports environment variables used in lambdas as well as Cloudformation stack output
  # so that we can load these using dotenv within the integration and e2e tests
  - serverless-export-env

provider:
  name: aws
  runtime: nodejs12.x
  region: ${opt:region, 'us-east-1'}
  environment:
    STAGE: ${self:custom.stage}

package:
  # Deploy lambda functions individually to reduce bundle size.
  individually: true
  # Don't package any sensitive files.
  exclude:
    - package-lock.json
    - package.json

custom:
  region: ${opt:region, self:provider.region}
  stage: ${opt:stage, self:provider.stage}
  # Using esbuild to bundle the typescript code
  esbuild:
    packager: yarn
    bundle: true
    minify: false

  # AppSync graphql api that uses Cognito user pools for authentication and authorization.
  appSync:
    name: appsync-crud-sls
    schema: schema.graphql
    authenticationType: AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion: ${self:custom.region}
      defaultAction: ALLOW
      userPoolId: !Ref CognitoUserPool
    # Map each graphql field to a direct lambda resolver datasource. I'm using a generic response mapping
    # template so that we handle returning data, validation errors or user facing errors consistently.
    mappingTemplates:
      - type: Mutation
        dataSource: createPostSource
        field: createPost
        request: false
        response: response-mapping-template.vtl
      - type: Mutation
        dataSource: updatePostSource
        field: updatePost
        request: false
        response: response-mapping-template.vtl
      - type: Mutation
        dataSource: deletePostSource
        field: deletePost
        request: false
        response: response-mapping-template.vtl
      - type: Query
        dataSource: getPostSource
        field: getPost
        request: false
        response: response-mapping-template.vtl
    # Direct lambda resolver datasources
    dataSources:
      - type: AWS_LAMBDA
        name: createPostSource
        config:
          functionName: createPost
      - type: AWS_LAMBDA
        name: updatePostSource
        config:
          functionName: updatePost
      - type: AWS_LAMBDA
        name: deletePostSource
        config:
          functionName: deletePost
      - type: AWS_LAMBDA
        name: getPostSource
        config:
          functionName: getPost

functions:
  # Handles the Cognito's `PostConfirmation` trigger event; adding a user to dynamodb.
  confirmUserSignup:
    handler: functions/confirm-user-signup.handler
    environment:
      USERS_TABLE_NAME: !Ref UsersTable
    iamRoleStatements:
      - Effect: Allow
        Action: "dynamodb:PutItem"
        Resource: !GetAtt UsersTable.Arn

  # Handles validating and creating a blog post for an authenticated user in dynamodb.
  createPost:
    handler: functions/create-post.handler
    environment:
      POSTS_TABLE_NAME: !Ref PostsTable
    iamRoleStatements:
      # Allow the lambda the permission to 'put' a post to dynamodb.
      - Effect: Allow
        Action: "dynamodb:PutItem"
        Resource: !GetAtt PostsTable.Arn

  # Handles validating and updating a blog post for an authenticated user in dynamodb.
  updatePost:
    handler: functions/update-post.handler
    environment:
      # Pass in the name of the posts dynamodb table as it's dynamically generated by cloudformation.
      POSTS_TABLE_NAME: !Ref PostsTable
    iamRoleStatements:
      # Allow the lambda the permission to 'update' a post in dynamodb.
      - Effect: Allow
        Action: "dynamodb:UpdateItem"
        Resource: !GetAtt PostsTable.Arn

  # Handles deleting a blog post for an authenticated user in dynamodb.
  deletePost:
    handler: functions/delete-post.handler
    environment:
      POSTS_TABLE_NAME: !Ref PostsTable
    iamRoleStatements:
      # Allow the lambda the permission to 'delete' a post in dynamodb.
      - Effect: Allow
        Action: "dynamodb:DeleteItem"
        Resource: !GetAtt PostsTable.Arn

  # Handles getting a blog post for an authenticated user in dynamodb.
  getPost:
    handler: functions/get-post.handler
    environment:
      POSTS_TABLE_NAME: !Ref PostsTable
    iamRoleStatements:
      # Allow the lambda the permission to 'get' a post in dynamodb.
      - Effect: Allow
        Action: "dynamodb:GetItem"
        Resource: !GetAtt PostsTable.Arn

resources:
  Resources:
    # Dynamodb table for storing users as they are confirmed in Cognito.
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        # Use pay per request billing mode as this application will have an unpredictable workload.
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S

    # Dynamodb table for storing an authenticated users posts.
    PostsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          # The id of the post (ulid)
          - AttributeName: id
            KeyType: HASH
          # The authenticated users id.
          - AttributeName: userId
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S

    # Cognito user pool used for user registration and authentication with the AppSync api.
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AutoVerifiedAttributes:
          - email
        Policies:
          # NOTE: Just using a basic password policy to make development easy.
          # I would never use these settings in a proper production application!
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: false
            RequireNumbers: false
            RequireUppercase: false
            RequireSymbols: false
        UsernameAttributes:
          - email
        LambdaConfig:
          # When a user is confirmed we want to add them to a users table in dynamodb.
          PostConfirmation: !GetAtt ConfirmUserSignupLambdaFunction.Arn

    # Give the Cognito service permission to invoke the confirm user signup lambda.
    UserPoolInvokeConfirmUserSignupLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: "lambda:invokeFunction"
        FunctionName: !Ref ConfirmUserSignupLambdaFunction
        Principal: "cognito-idp.amazonaws.com"
        SourceArn: !GetAtt CognitoUserPool.Arn

    # User pool client used by the frontend web application and tests to register users, signin and authenticate with the AppSync api.
    WebUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref CognitoUserPool
        ClientName: web
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        # Return a generic `NotAuthorizedException` if either the username or password is incorrect.
        PreventUserExistenceErrors: ENABLED

  Outputs:
    # Output the aws region so that we can use the export-env plugin in tests
    AwsRegion:
      Value: ${self:custom.region}
    # Output the user pool id so that we can use the export-env plugin in tests
    CognitoUserPoolId:
      Value: !Ref CognitoUserPool
    # Output the user pool clientId so that we can use the export-env plugin in tests
    WebUserPoolClientId:
      Value: !Ref WebUserPoolClient
    # Output the AppSync api url so that we can use the export-env plugin in tests
    AppSyncApiUrl:
      Value: !GetAtt GraphQlApi.GraphQLUrl
