service: appsync-crud-sls-backend
frameworkVersion: "2"

plugins:
  - serverless-appsync-plugin
  - serverless-esbuild
  - serverless-iam-roles-per-function
  - serverless-export-env

provider:
  name: aws
  runtime: nodejs12.x
  region: ${opt:region, 'us-east-1'}
  environment:
    STAGE: ${self:custom.stage}

package:
  individually: true
  exclude:
    - package-lock.json
    - package.json

custom:
  region: ${opt:region, self:provider.region}
  stage: ${opt:stage, self:provider.stage}
  esbuild:
    packager: yarn
    bundle: true
    minify: false
  appSync:
    name: appsync-crud-sls
    schema: schema.graphql
    authenticationType: AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion: ${self:custom.region}
      defaultAction: ALLOW
      userPoolId: !Ref CognitoUserPool
    additionalAuthenticationProviders:
      - authenticationType: AWS_IAM
    mappingTemplates:
      - type: Mutation
        dataSource: createPostSource
        field: createPost
        request: false
        response: response-mapping-template.vtl
      - type: Mutation
        dataSource: updatePostSource
        field: updatePost
        request: false
        response: response-mapping-template.vtl
    dataSources:
      - type: AWS_LAMBDA
        name: createPostSource
        config:
          functionName: createPost
      - type: AWS_LAMBDA
        name: updatePostSource
        config:
          functionName: updatePost

functions:
  confirmUserSignup:
    handler: functions/confirm-user-signup.handler
    environment:
      USERS_TABLE_NAME: !Ref UsersTable
    iamRoleStatements:
      - Effect: Allow
        Action: "dynamodb:PutItem"
        Resource: !GetAtt UsersTable.Arn

  createPost:
    handler: functions/create-post.handler
    environment:
      POSTS_TABLE_NAME: !Ref PostsTable
    iamRoleStatements:
      - Effect: Allow
        Action: "dynamodb:PutItem"
        Resource: !GetAtt PostsTable.Arn

  updatePost:
    handler: functions/update-post.handler
    environment:
      POSTS_TABLE_NAME: !Ref PostsTable
    iamRoleStatements:
      - Effect: Allow
        Action: "dynamodb:UpdateItem"
        Resource: !GetAtt PostsTable.Arn

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S

    PostsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: false
            RequireNumbers: false
            RequireUppercase: false
            RequireSymbols: false
        UsernameAttributes:
          - email
        LambdaConfig:
          PostConfirmation: !GetAtt ConfirmUserSignupLambdaFunction.Arn

    UserPoolInvokeConfirmUserSignupLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: "lambda:invokeFunction"
        FunctionName: !Ref ConfirmUserSignupLambdaFunction
        Principal: "cognito-idp.amazonaws.com"
        SourceArn: !GetAtt CognitoUserPool.Arn

    WebUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref CognitoUserPool
        ClientName: web
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED

  Outputs:
    AwsRegion:
      Value: ${self:custom.region}
    CognitoUserPoolId:
      Value: !Ref CognitoUserPool
    WebUserPoolClientId:
      Value: !Ref WebUserPoolClient
    AppSyncApiUrl:
      Value: !GetAtt GraphQlApi.GraphQLUrl
